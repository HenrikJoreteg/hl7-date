{"version":3,"file":"hl7-date.modern.js","sources":["../src/hl7-date.js"],"sourcesContent":["const timeZoneDelimiterRe = /[\\+\\-]/\nconst getSection = (str, start, end) => {\n  const section = str.slice(start, end)\n  return section ? Number(section) : 0\n}\n\nconst toMilliseconds = str => Math.round(Number('0.' + str) * 1000)\n\n// Specifies a point in time using a 24-hour clock notation.\n// Format: YYYY[MM[DD[HH[MM[SS[.S[S[S[S]]]]]]]]][+/-ZZZZ].\nexport const parse = input => {\n  debugger\n  const [str, timeZoneOffset] = input.split(timeZoneDelimiterRe)\n  const year = getSection(str, 0, 4)\n  let month = getSection(str, 4, 6)\n  if (month) {\n    month = month - 1\n  }\n  const day = getSection(str, 6, 8) || 1\n  let hour = getSection(str, 8, 10)\n  let min = getSection(str, 10, 12)\n  const seconds = getSection(str, 12, 14)\n  const msString = str.split('.')[1]\n  const milliseconds = msString ? toMilliseconds(msString) : ''\n\n  let minuteAdjustments = 0\n  if (timeZoneOffset) {\n    const isNegative = input.includes('-')\n    const multiplier = isNegative ? 1 : -1\n    const offsetHours = getSection(timeZoneOffset, 0, 2)\n    const offsetMinutes = getSection(timeZoneOffset, 2, 4)\n    if (offsetHours) {\n      minuteAdjustments += offsetHours * multiplier * 60\n    }\n    if (offsetMinutes) {\n      minuteAdjustments += offsetMinutes * multiplier\n    }\n  }\n\n  const args = [year, month, day, hour, min, seconds, milliseconds]\n\n  let date = new Date(...args)\n\n  if (timeZoneOffset) {\n    // if we're given a timezone offset, use it\n    date = new Date(Date.UTC(...args) + minuteAdjustments * 60000)\n  }\n\n  return date\n}\n\nconst fnMap = {\n  getMilliseconds: 'millisecond',\n  getSeconds: 'second',\n  getMinutes: 'minute',\n  getHours: 'hour',\n  getDate: 'date',\n  getMonth: 'month',\n}\nconst determinePrecision = date => {\n  for (const fnName in fnMap) {\n    const value = date[fnName]()\n    let isMatch = !!value\n    if (fnName === 'getDate') {\n      isMatch = value !== 1\n    }\n    if (isMatch) {\n      return fnMap[fnName]\n    }\n  }\n  return 'year'\n}\n\nconst getTimeZoneAddOn = offsetMinutes => {\n  if (!offsetMinutes) {\n    return '+0000'\n  }\n  const plusMinus = offsetMinutes > 0 ? '-' : '+'\n  const hours = Math.floor(offsetMinutes / 60)\n    .toString()\n    .padStart(2, 0)\n  return plusMinus + hours + (offsetMinutes % 60).toString().padStart(2, 0)\n}\n\n// year, date, month, hour, minute, second, millisecond\nexport const stringify = (date, precisionSpec) => {\n  const precision = precisionSpec || determinePrecision(date)\n  const includeTimeZoneOffset = !['year', 'month', 'date'].includes(precision)\n  const timeZoneAddOn = includeTimeZoneOffset\n    ? getTimeZoneAddOn(date.getTimezoneOffset())\n    : ''\n  const endIndex = {\n    millisecond: 7,\n    second: 6,\n    minute: 5,\n    hour: 4,\n    date: 3,\n    month: 2,\n    year: 1,\n  }[precision]\n  return (\n    [\n      'getFullYear',\n      'getMonth',\n      'getDate',\n      'getHours',\n      'getMinutes',\n      'getSeconds',\n      'getMilliseconds',\n    ]\n      .slice(0, endIndex)\n      .reduce((res, fnName, index) => {\n        let value = date[fnName]()\n        // silly javascript months\n        if (index === 1) {\n          value = value + 1\n        }\n        const str = value + ''\n        if (index === 6) {\n          if (!value) {\n            return res\n          } else {\n            // strips trailing zeros\n            // *NOTE: cannot just do the Number transformation\n            // at the end because JS does crazy things on larger\n            // floats. The decimals change, for example:\n            // Number('20101203231524.029') becomes: 20101203231524.027\n            // so we do it just with the decimal\n            const decimalEnding = Number(\n              '0.' + (value + '').padStart(3, '0')\n            ).toString()\n            return res + decimalEnding.slice(1, 5)\n          }\n        }\n        return res + (index === 0 ? str : str.padStart(2, 0))\n      }, '') + timeZoneAddOn\n  )\n}\n"],"names":["timeZoneDelimiterRe","getSection","str","start","end","section","slice","Number","parse","input","timeZoneOffset","split","year","month","day","hour","min","seconds","msString","milliseconds","Math","round","toMilliseconds","minuteAdjustments","multiplier","includes","offsetHours","offsetMinutes","args","date","Date","UTC","fnMap","getMilliseconds","getSeconds","getMinutes","getHours","getDate","getMonth","stringify","precisionSpec","precision","fnName","value","isMatch","determinePrecision","timeZoneAddOn","getTimezoneOffset","floor","toString","padStart","millisecond","second","minute","reduce","res","index"],"mappings":"AAAA,MAAMA,EAAsB,SACtBC,EAAa,CAACC,EAAKC,EAAOC,KAC9B,MAAMC,EAAUH,EAAII,MAAMH,EAAOC,GACjC,OAAOC,EAAUE,OAAOF,GAAW,GAOxBG,EAAQC,IAEnB,MAAOP,EAAKQ,GAAkBD,EAAME,MAAMX,GACpCY,EAAOX,EAAWC,EAAK,EAAG,GAChC,IAAIW,EAAQZ,EAAWC,EAAK,EAAG,GAC3BW,IACFA,GAAgB,GAElB,MAAMC,EAAMb,EAAWC,EAAK,EAAG,IAAM,EACrC,IAAIa,EAAOd,EAAWC,EAAK,EAAG,IAC1Bc,EAAMf,EAAWC,EAAK,GAAI,IAC9B,MAAMe,EAAUhB,EAAWC,EAAK,GAAI,IAC9BgB,EAAWhB,EAAIS,MAAM,KAAK,GAC1BQ,EAAeD,EAjBAhB,CAAAA,GAAOkB,KAAKC,MAA2B,IAArBd,OAAO,KAAOL,IAiBrBoB,CAAeJ,GAAY,GAE3D,IAAIK,EAAoB,EACxB,GAAIb,EAAgB,CAClB,MACMc,EADaf,EAAMgB,SAAS,KACF,GAAK,EAC/BC,EAAczB,EAAWS,EAAgB,EAAG,GAC5CiB,EAAgB1B,EAAWS,EAAgB,EAAG,GAChDgB,IACFH,GAAqBG,EAAcF,EAAa,IAE9CG,IACFJ,GAAqBI,EAAgBH,GAIzC,MAAMI,EAAO,CAAChB,EAAMC,EAAOC,EAAKC,EAAMC,EAAKC,EAASE,GAEpD,IAAIU,EAAO,IAAIC,QAAQF,GAOvB,OALIlB,IAEFmB,EAAO,IAAIC,KAAKA,KAAKC,OAAOH,GAA4B,IAApBL,IAG/BM,GAGHG,EAAQ,CACZC,gBAAiB,cACjBC,WAAY,SACZC,WAAY,SACZC,SAAU,OACVC,QAAS,OACTC,SAAU,SA4BCC,EAAY,CAACV,EAAMW,KAC9B,MAAMC,EAAYD,GA3BOX,CAAAA,IACzB,IAAK,MAAMa,KAAUV,EAAO,CAC1B,MAAMW,EAAQd,EAAKa,KACnB,IAAIE,IAAYD,EAIhB,GAHe,YAAXD,IACFE,EAAoB,IAAVD,GAERC,EACF,OAAOZ,EAAMU,GAGjB,MAAO,QAgB4BG,CAAmBhB,GAEhDiB,EADyB,CAAC,OAAQ,QAAS,QAAQrB,SAASgB,GAG9D,IAjBmBd,EAgBFE,EAAKkB,sBAZRpB,EAAgB,EAAI,IAAM,KAC9BP,KAAK4B,MAAMrB,EAAgB,IACtCsB,WACAC,SAAS,EAAG,IACavB,EAAgB,IAAIsB,WAAWC,SAAS,EAAG,GAN9D,QAFcvB,IAAAA,EA2BvB,MACE,CACE,cACA,WACA,UACA,WACA,aACA,aACA,mBAECrB,MAAM,EAnBM,CACf6C,YAAa,EACbC,OAAQ,EACRC,OAAQ,EACRtC,KAAM,EACNc,KAAM,EACNhB,MAAO,EACPD,KAAM,GACN6B,IAYGa,OAAO,CAACC,EAAKb,EAAQc,KACpB,IAAIb,EAAQd,EAAKa,KAEH,IAAVc,IACFb,GAAgB,GAElB,MAAMzC,EAAMyC,EAAQ,GACpB,OAAc,IAAVa,EACGb,EAYIY,EAHehD,OACpB,MAAQoC,EAAQ,IAAIO,SAAS,EAAG,MAChCD,WACyB3C,MAAM,EAAG,GAX7BiD,EAcJA,GAAiB,IAAVC,EAActD,EAAMA,EAAIgD,SAAS,EAAG,KACjD,IAAMJ"}